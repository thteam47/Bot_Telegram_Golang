syntax  = "proto3";
package bottelegram;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "/botpb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "server";
		version: "1.0";
	};
	external_docs: {
		url: "https://github.com/grpc-ecosystem/grpc-gateway";
		description: "More about gRPC-Gateway";
	}
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
		key: "Bearer";
		value: {
			type: TYPE_API_KEY;
			in: IN_HEADER;
			name: "Authorization";
		}
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
			}
		}
		responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
			json_schema: {
				type: STRING;
			}
			}
		}
		}
		security: {
		security_requirement: {
			key: "Bearer"
		}
	};
};

message Bot{
	string tokenBot = 1;
}
message RespMess{
	string respMess = 1 ;
}
message MessRes {
	string idChat = 1;
	string body = 2;
}
message SendKeyboard {
	string idChat = 1;
	string body = 2;
} 
message GetCommandResp {
} 
service ServerService {	
	rpc changeTokenBot (Bot) returns (RespMess) {
		option (google.api.http) = {
			post: "/changetoken"
			body: "*"
		};		
	}
	rpc getBot (Bot) returns (RespMess) {
		option (google.api.http) = {
			get: "/getBot"
		};
	}
	rpc sendMess (MessRes) returns (RespMess) {
		option (google.api.http) = {
			post: "/sendMess"
			body: "*"
		};
	}
	rpc sendKeyboard (MessRes) returns (RespMess) {
		option (google.api.http) = {
			post: "/sendKeyboard"
			body: "*"
		};
	}
	rpc getCommand (GetCommandResp) returns (RespMess) {
		option (google.api.http) = {
			get: "/getCommand"
		};
	}
}