// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/bot.proto

package botpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	ChangeTokenBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*RespMess, error)
	GetBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*RespMess, error)
	SendMess(ctx context.Context, in *MessRes, opts ...grpc.CallOption) (*RespMess, error)
	SendKeyboard(ctx context.Context, in *MessRes, opts ...grpc.CallOption) (*RespMess, error)
	GetCommand(ctx context.Context, in *GetCommandResp, opts ...grpc.CallOption) (*RespMess, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) ChangeTokenBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*RespMess, error) {
	out := new(RespMess)
	err := c.cc.Invoke(ctx, "/bottelegram.ServerService/changeTokenBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*RespMess, error) {
	out := new(RespMess)
	err := c.cc.Invoke(ctx, "/bottelegram.ServerService/getBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendMess(ctx context.Context, in *MessRes, opts ...grpc.CallOption) (*RespMess, error) {
	out := new(RespMess)
	err := c.cc.Invoke(ctx, "/bottelegram.ServerService/sendMess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendKeyboard(ctx context.Context, in *MessRes, opts ...grpc.CallOption) (*RespMess, error) {
	out := new(RespMess)
	err := c.cc.Invoke(ctx, "/bottelegram.ServerService/sendKeyboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetCommand(ctx context.Context, in *GetCommandResp, opts ...grpc.CallOption) (*RespMess, error) {
	out := new(RespMess)
	err := c.cc.Invoke(ctx, "/bottelegram.ServerService/getCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	ChangeTokenBot(context.Context, *Bot) (*RespMess, error)
	GetBot(context.Context, *Bot) (*RespMess, error)
	SendMess(context.Context, *MessRes) (*RespMess, error)
	SendKeyboard(context.Context, *MessRes) (*RespMess, error)
	GetCommand(context.Context, *GetCommandResp) (*RespMess, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) ChangeTokenBot(context.Context, *Bot) (*RespMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTokenBot not implemented")
}
func (UnimplementedServerServiceServer) GetBot(context.Context, *Bot) (*RespMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedServerServiceServer) SendMess(context.Context, *MessRes) (*RespMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMess not implemented")
}
func (UnimplementedServerServiceServer) SendKeyboard(context.Context, *MessRes) (*RespMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyboard not implemented")
}
func (UnimplementedServerServiceServer) GetCommand(context.Context, *GetCommandResp) (*RespMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_ChangeTokenBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ChangeTokenBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bottelegram.ServerService/changeTokenBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ChangeTokenBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bottelegram.ServerService/getBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendMess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendMess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bottelegram.ServerService/sendMess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendMess(ctx, req.(*MessRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bottelegram.ServerService/sendKeyboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendKeyboard(ctx, req.(*MessRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bottelegram.ServerService/getCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetCommand(ctx, req.(*GetCommandResp))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bottelegram.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "changeTokenBot",
			Handler:    _ServerService_ChangeTokenBot_Handler,
		},
		{
			MethodName: "getBot",
			Handler:    _ServerService_GetBot_Handler,
		},
		{
			MethodName: "sendMess",
			Handler:    _ServerService_SendMess_Handler,
		},
		{
			MethodName: "sendKeyboard",
			Handler:    _ServerService_SendKeyboard_Handler,
		},
		{
			MethodName: "getCommand",
			Handler:    _ServerService_GetCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bot.proto",
}
